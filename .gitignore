from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiohttp import web
import asyncio
import logging
import os
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.getenv("GOOGLE_CREDS_JSON")
creds = ServiceAccountCredentials.from_json_keyfile_dict(eval(creds_json), scope)
client = gspread.authorize(creds)
spreadsheet = client.open("PBTEndorsements")
sheet = spreadsheet.sheet1

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    first_name = State()
    last_name = State()
    email = State()
    country = State()
    city = State()

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ /start
@dp.message(commands="start")
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–º –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É Plant Based Treaty.\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(Form.first_name)

@dp.message(Form.first_name)
async def process_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer("–ê —Ñ–∞–º–∏–ª–∏—è?")
    await state.set_state(Form.last_name)

@dp.message(Form.last_name)
async def process_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await message.answer("–í–∞—à email:")
    await state.set_state(Form.email)

@dp.message(Form.email)
async def process_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("–ò–∑ –∫–∞–∫–æ–π –≤—ã —Å—Ç—Ä–∞–Ω—ã?")
    await state.set_state(Form.country)

@dp.message(Form.country)
async def process_country(message: Message, state: FSMContext):
    await state.update_data(country=message.text)
    await message.answer("–ê –≥–æ—Ä–æ–¥?")
    await state.set_state(Form.city)

@dp.message(Form.city)
async def process_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    data = await state.get_data()
    row = [data["first_name"], data["last_name"], data["email"], data["country"], data["city"]]
    sheet.append_row(row)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∫–ª–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def fallback(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É.")

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä
async def on_startup(app):
    logging.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook...")
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=False)
    logging.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def on_shutdown(app):
    logging.warning("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ...")

async def handle_webhook(request):
    body = await request.json()
    update = types.Update(**body)
    await dp.feed_update(bot, update)
    return web.Response()

app = web.Application()
app.router.add_post('/webhook', handle_webhook)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == '__main__':
    web.run_app(app, host='0.0.0.0', port=int(os.environ.get('PORT', 10000)))
