import logging
import json
import os
import gspread
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from oauth2client.service_account import ServiceAccountCredentials

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not BOT_TOKEN or not GOOGLE_CREDS_JSON:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ GOOGLE_CREDS_JSON –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google –¢–∞–±–ª–∏—Ü–µ
def init_gspread():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds_dict = json.loads(GOOGLE_CREDS_JSON)
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    client = gspread.authorize(creds)
    sheet = client.open("PBTEndorsements").sheet1
    return sheet

sheet = init_gspread()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
class Form(StatesGroup):
    name = State()
    surname = State()
    email = State()
    country = State()
    city = State()

# –°—Ç–∞—Ä—Ç –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands="start")
async def start_form(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await Form.name.set()

@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–ê —Ñ–∞–º–∏–ª–∏—è?")
    await Form.surname.set()

@dp.message_handler(state=Form.surname)
async def process_surname(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π email:")
    await Form.email.set()

@dp.message_handler(state=Form.email)
async def process_email(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("–ò–∑ –∫–∞–∫–æ–π —Ç—ã —Å—Ç—Ä–∞–Ω—ã?")
    await Form.country.set()

@dp.message_handler(state=Form.country)
async def process_country(message: types.Message, state: FSMContext):
    await state.update_data(country=message.text)
    await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞?")
    await Form.city.set()

@dp.message_handler(state=Form.city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    data = await state.get_data()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
    sheet.append_row([
        data["name"],
        data["surname"],
        data["email"],
        data["country"],
        data["city"]
    ])

    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢—ã –ø–æ–¥–¥–µ—Ä–∂–∞–ª –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É Plant Based Treaty üå±")
    await state.finish()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
